// Generated by ScalaBuff, the Scala Protocol Buffers compiler. DO NOT EDIT!
// source: chat.proto

package pl.edu.agh.dsrg.sr.chat.protos

import scala.beans.BeanProperty

final case class ChatMessage(
                              `message`: String = ""
                              ) extends com.google.protobuf.GeneratedMessageLite
with com.google.protobuf.MessageLite.Builder
with net.sandrogrzicic.scalabuff.Message[ChatMessage] {


  def writeTo(output: com.google.protobuf.CodedOutputStream) {
    output.writeString(1, `message`)
  }

  lazy val getSerializedSize = {
    import com.google.protobuf.CodedOutputStream._
    var size = 0
    size += computeStringSize(1, `message`)

    size
  }

  def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): ChatMessage = {
    import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
    var __message: String = ""

    def __newMerged = ChatMessage(
      __message
    )
    while (true) in.readTag match {
      case 0 => return __newMerged
      case 10 => __message = in.readString()
      case default => if (!in.skipField(default)) return __newMerged
    }
    null
  }

  def mergeFrom(m: ChatMessage) = {
    ChatMessage(
      m.`message`
    )
  }

  def getDefaultInstanceForType = ChatMessage.defaultInstance

  def clear = getDefaultInstanceForType

  def isInitialized = true

  def build = this

  def buildPartial = this

  def newBuilderForType = this

  def toBuilder = this
}

object ChatMessage {
  @BeanProperty val defaultInstance = new ChatMessage()

  val MESSAGE_FIELD_NUMBER = 1

}

final case class ChatAction(
                             `action`: ChatAction.ActionType.EnumVal = ChatAction.ActionType._UNINITIALIZED,
                             `channel`: String = "",
                             `nickname`: String = ""
                             ) extends com.google.protobuf.GeneratedMessageLite
with com.google.protobuf.MessageLite.Builder
with net.sandrogrzicic.scalabuff.Message[ChatAction] {


  def writeTo(output: com.google.protobuf.CodedOutputStream) {
    output.writeEnum(1, `action`)
    output.writeString(2, `channel`)
    output.writeString(3, `nickname`)
  }

  lazy val getSerializedSize = {
    import com.google.protobuf.CodedOutputStream._
    var size = 0
    size += computeEnumSize(1, `action`)
    size += computeStringSize(2, `channel`)
    size += computeStringSize(3, `nickname`)

    size
  }

  def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): ChatAction = {
    import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
    var __action: ChatAction.ActionType.EnumVal = ChatAction.ActionType._UNINITIALIZED
    var __channel: String = ""
    var __nickname: String = ""

    def __newMerged = ChatAction(
      __action,
      __channel,
      __nickname
    )
    while (true) in.readTag match {
      case 0 => return __newMerged
      case 8 => __action = ChatAction.ActionType.valueOf(in.readEnum())
      case 18 => __channel = in.readString()
      case 26 => __nickname = in.readString()
      case default => if (!in.skipField(default)) return __newMerged
    }
    null
  }

  def mergeFrom(m: ChatAction) = {
    ChatAction(
      m.`action`,
      m.`channel`,
      m.`nickname`
    )
  }

  def getDefaultInstanceForType = ChatAction.defaultInstance

  def clear = getDefaultInstanceForType

  def isInitialized = true

  def build = this

  def buildPartial = this

  def newBuilderForType = this

  def toBuilder = this
}

object ChatAction {
  @BeanProperty val defaultInstance = new ChatAction()

  val ACTION_FIELD_NUMBER = 1
  val CHANNEL_FIELD_NUMBER = 2
  val NICKNAME_FIELD_NUMBER = 3

  object ActionType extends net.sandrogrzicic.scalabuff.Enum {

    sealed trait EnumVal extends Value

    val _UNINITIALIZED = new EnumVal {
      val name = "UNINITIALIZED ENUM VALUE";
      val id = -1
    }

    val JOIN = new EnumVal {
      val name = "JOIN";
      val id = 0
    }
    val LEAVE = new EnumVal {
      val name = "LEAVE";
      val id = 1
    }

    val JOIN_VALUE = 0
    val LEAVE_VALUE = 1

    def valueOf(id: Int) = id match {
      case 0 => JOIN
      case 1 => LEAVE
      case _default => throw new net.sandrogrzicic.scalabuff.UnknownEnumException(_default)
    }

    val internalGetValueMap = new com.google.protobuf.Internal.EnumLiteMap[EnumVal] {
      def findValueByNumber(id: Int): EnumVal = valueOf(id)
    }
  }

}

final case class ChatState(
                            `state`: Vector[ChatAction] = Vector.empty[ChatAction]
                            ) extends com.google.protobuf.GeneratedMessageLite
with com.google.protobuf.MessageLite.Builder
with net.sandrogrzicic.scalabuff.Message[ChatState] {

  def setState(_i: Int, _v: ChatAction) = copy(`state` = `state`.updated(_i, _v))

  def addState(_f: ChatAction) = copy(`state` = `state` :+ _f)

  def addAllState(_f: ChatAction*) = copy(`state` = `state` ++ _f)

  def addAllState(_f: TraversableOnce[ChatAction]) = copy(`state` = `state` ++ _f)

  def clearState = copy(`state` = Vector.empty[ChatAction])

  def writeTo(output: com.google.protobuf.CodedOutputStream) {
    for (_v <- `state`) output.writeMessage(1, _v)
  }

  lazy val getSerializedSize = {
    import com.google.protobuf.CodedOutputStream._
    var size = 0
    for (_v <- `state`) size += computeMessageSize(1, _v)

    size
  }

  def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): ChatState = {
    import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
    val __state: collection.mutable.Buffer[ChatAction] = `state`.toBuffer

    def __newMerged = ChatState(
      Vector(__state: _*)
    )
    while (true) in.readTag match {
      case 0 => return __newMerged
      case 10 => __state += readMessage[ChatAction](in, ChatAction.defaultInstance, _emptyRegistry)
      case default => if (!in.skipField(default)) return __newMerged
    }
    null
  }

  def mergeFrom(m: ChatState) = {
    ChatState(
      `state` ++ m.`state`
    )
  }

  def getDefaultInstanceForType = ChatState.defaultInstance

  def clear = getDefaultInstanceForType

  def isInitialized = true

  def build = this

  def buildPartial = this

  def newBuilderForType = this

  def toBuilder = this
}

object ChatState {
  @BeanProperty val defaultInstance = new ChatState()

  val STATE_FIELD_NUMBER = 1

}

object ChatOperationProtos {
  def registerAllExtensions(registry: com.google.protobuf.ExtensionRegistryLite) {
  }

}
